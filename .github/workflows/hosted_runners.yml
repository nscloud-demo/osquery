#
# Copyright (c) 2014-present, The osquery authors
#
# This source code is licensed as defined by the LICENSE file found in the
# root directory of this source tree.
#
# SPDX-License-Identifier: (Apache-2.0 OR GPL-2.0-only)
#

# Due to a limitation in how GitHub Actions works, we can't reference
# jobs in another file inside the `needs` statement.
#
# This configuration file takes care of the Windows, macOS and Linux
# builds on the x86 platform.
name: build_x86

on:
  # Run this workflow once every day against the master branch
  # schedule:
  #  - cron: "0 7 * * *"

  # push:
  #   branches:
  #     - 'master'
  #     - 'main'

  #   tags:
  #     - '*'

  # pull_request:
  #   branches:
  #     - '*'
  workflow_dispatch:

# Cancel old jobs of a PR if a new job is started.
# Fallback on using the run id if it's not a PR, which is unique, so no job canceling.
# concurrency:
#   group: hosted-${{ github.event.pull_request.number || github.run_id }}
#   cancel-in-progress: true

# Please remember to update values for both x86 and aarch64 workflows.
env:
  PACKAGING_REPO: https://github.com/osquery/osquery-packaging
  PACKAGING_COMMIT: c089fb2d3d796d976e3b2fbea7ee69a1616b9576
  SUBMODULE_CACHE_VERSION: 3
  OSQUERY_VERSION: 5.15.0

# If the initial code sanity checks are passing, then one job
# per [`platform` * `build_type`] will start, building osquery
# and generating packages that are later attached to the commit
# (or PR) as build artifacts.
jobs:
  # This job performs basic source code check, looking for formatting
  # issues and missing copyright headers
  check_code_style:
    runs-on:
      - nscloud-ubuntu-20.04-amd64-4x16-with-features
      - namespace-experiments:privileged;host-pid-namespace

    container:
      image: osquery/builder20.04:7e9ee0339
      options: --user 1001

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="workspace/build"
          rel_source_path="workspace/src"

          mkdir -p "${rel_build_path}"
          mkdir -p "${rel_source_path}"

          echo "SOURCE=$(realpath ${rel_source_path})" >> $GITHUB_OUTPUT
          echo "BINARY=$(realpath ${rel_build_path})" >> $GITHUB_OUTPUT

      - name: Clone the osquery repository
        uses: actions/checkout@v4
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}
          fetch-depth: 0

      # This script makes sure that the copyright headers have been correctly
      # placed on all the source code files
      - name: Check the copyright headers
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        run: |
          ./tools/ci/scripts/check_copyright_headers.py

      - name: Configure the project
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: |
          cmake -G "Unix Makefiles" \
            -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
            -DOSQUERY_ENABLE_FORMAT_ONLY=ON \
            -DOSQUERY_VERSION=${{ env.OSQUERY_VERSION }} \
            "${{ steps.build_paths.outputs.SOURCE }}"

      # Formatting is tested against the clang-format binary we ship
      # with the osquery-toolchain, so this job is only performed once on
      # a Linux machine.
      - name: Check code formatting
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: cmake --build . --target format_check

  # This jobs checks that the third party libraries manifest has the correct format
  # and that is up to date compared to the current state of the repository
  check_libraries_manifest:
    runs-on:
      - nscloud-ubuntu-20.04-amd64-4x16-with-features
      - namespace-experiments:privileged;host-pid-namespace

    steps:
      - name: Clone the osquery repository
        uses: actions/checkout@v4

      - name: Install python pre-requisites
        run: |
          pip3 install -r ./tools/ci/scripts/cve/requirements.txt

      - name: Verify the third party libraries manifest
        run: |
          ./tools/ci/scripts/cve/validate_manifest_libraries_versions.py --manifest libraries/third_party_libraries_manifest.json \
          --repository .

  # Test generating the website json
  check_genwebsitejson:
    needs: [check_code_style, check_libraries_manifest]
    runs-on:
      - nscloud-ubuntu-20.04-amd64-4x16-with-features
      - namespace-experiments:privileged;host-pid-namespace

    steps:
      - name: Clone the osquery repository
        uses: actions/checkout@v4

      - name: genwebsitejson.py
        run: python3 tools/codegen/genwebsitejson.py --specs=specs/

  # This job runs source code analysis tools (currently, just cppcheck)
  check_source_code:
    needs: [check_code_style, check_libraries_manifest]

    runs-on:
      - nscloud-ubuntu-20.04-amd64-4x16-with-features
      - namespace-experiments:privileged;host-pid-namespace

    container:
      image: osquery/builder20.04:7e9ee0339
      options: --user 1001

    steps:
      - name: Setup the build paths
        shell: bash
        id: build_paths
        run: |
          rel_build_path="workspace/build"
          rel_source_path="workspace/src"
          rel_install_path="workspace/install"

          mkdir -p ${rel_build_path} \
                   ${rel_source_path} \
                   ${rel_install_path}

          echo "SOURCE=$(realpath ${rel_source_path})" >> $GITHUB_OUTPUT
          echo "BINARY=$(realpath ${rel_build_path})" >> $GITHUB_OUTPUT
          echo "REL_BINARY=${rel_build_path}" >> $GITHUB_OUTPUT

      - name: Clone the osquery repository
        uses: actions/checkout@v4
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}
          fetch-depth: 0

      - name: Update the cache (git submodules)
        uses: actions/cache@v4
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules

          key: |
            gitmodules_${{env.SUBMODULE_CACHE_VERSION}}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{env.SUBMODULE_CACHE_VERSION}}

      - name: Update the git submodules
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        run: |
          git submodule sync --recursive

      - name: Configure the project (Release)
        working-directory: ${{ steps.build_paths.outputs.BINARY }}

        run: |
          cmake -G "Unix Makefiles" \
            -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
            -DCMAKE_BUILD_TYPE:STRING=Release \
            -DOSQUERY_BUILD_TESTS=ON \
            -DOSQUERY_BUILD_ROOT_TESTS=ON \
            -DOSQUERY_VERSION=${{ env.OSQUERY_VERSION }} \
            "${{ steps.build_paths.outputs.SOURCE }}"

      - name: Initialize the project (Release)
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: |
          cmake --build . --target prepare_for_ide

      - name: Run cppcheck (Release)
        shell: bash
        id: release_cppcheck_runner
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: |
          cmake --build . --target cppcheck 2>&1 | tee cppcheck_release.txt

      - name: Store the cppcheck log (Release)
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cppcheck-release
          path: ${{ steps.build_paths.outputs.REL_BINARY }}/cppcheck_release.txt

      - name: Configure the project (Debug)
        working-directory: ${{ steps.build_paths.outputs.BINARY }}

        run: |
          cmake -G "Unix Makefiles" \
            -DOSQUERY_VERSION=${{ env.OSQUERY_VERSION }} \
            -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
            -DCMAKE_BUILD_TYPE:STRING=Debug \
            -DOSQUERY_BUILD_TESTS=ON \
            -DOSQUERY_BUILD_ROOT_TESTS=ON \
            "${{ steps.build_paths.outputs.SOURCE }}"

      - name: Initialize the project (Debug)
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: |
          cmake --build . --target prepare_for_ide

      - name: Run cppcheck (Debug)
        shell: bash
        id: debug_cppcheck_runner
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        run: |
          cmake --build . --target cppcheck 2>&1 | tee cppcheck_debug.txt

      - name: Store the cppcheck log (Debug)
        uses: actions/upload-artifact@v4.4.0
        with:
          name: cppcheck-debug
          path: ${{ steps.build_paths.outputs.REL_BINARY }}/cppcheck_debug.txt

  # The Linux build will only start once we know that the code
  # has been properly formatted
  build_linux:
    needs: [check_code_style, check_libraries_manifest]

    runs-on:
      - nscloud-ubuntu-20.04-amd64-32x64-with-features
      - namespace-experiments:privileged;host-pid-namespace

    container:
      image: osquery/builder20.04:7e9ee0339
      options: --privileged --init -v /var/run/docker.sock:/var/run/docker.sock --pid=host --user 1001

    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Release
          # - RelWithDebInfo
          # - Debug

    steps:
      # - name: Make space uninstalling packages
      #   shell: bash
      #   run: |
      #     run_on_host="sudo nsenter -t 1 -m -u -n -i"
      #     packages_to_remove=$($run_on_host dpkg-query -f '${Package}\n' -W | grep "^clang-.*\|^llvm-.*\|^php.*\|^mono-.*\|^mongodb-.*\
      #     \|^libmono-.*\|^temurin-8-jdk\|^temurin-11-jdk\|^temurin-17-jdk\|^dotnet-.*\|^google-chrome-stable\|^microsoft-edge-stable\|^google-cloud-sdk\|^firefox\|^hhvm\|^snapd")
      #     $run_on_host apt purge $packages_to_remove

      # Due to how the RPM packaging tools work, we have to adhere to some
      # character count requirements in the build path vs source path.
      #
      # Failing to do so, will break the debuginfo RPM package.
      - name: Setup the build paths
        id: build_paths
        run: |
          rel_build_path="workspace/usr/src/debug/osquery/build"
          rel_src_path="workspace/padding-required-by-rpm-packages/src"
          rel_ccache_path="workspace/ccache"
          rel_package_data_path="workspace/package_data"
          rel_packaging_path="workspace/osquery-packaging"
          rel_package_build_path="workspace/package-build"

          mkdir -p ${rel_build_path} \
                   ${rel_src_path} \
                   ${rel_ccache_path} \
                   ${rel_src_path} \
                   ${rel_package_data_path} \
                   ${rel_package_build_path}

          echo "SOURCE=$(realpath ${rel_src_path})" >> $GITHUB_OUTPUT
          echo "BINARY=$(realpath ${rel_build_path})" >> $GITHUB_OUTPUT
          echo "CCACHE=$(realpath ${rel_ccache_path})" >> $GITHUB_OUTPUT
          echo "PACKAGING=$(realpath ${rel_packaging_path})" >> $GITHUB_OUTPUT
          echo "PACKAGE_DATA=$(realpath ${rel_package_data_path})" >> $GITHUB_OUTPUT
          echo "REL_PACKAGE_BUILD=${rel_package_build_path}" >> $GITHUB_OUTPUT
          echo "PACKAGE_BUILD=$(realpath ${rel_package_build_path})" >> $GITHUB_OUTPUT

      - name: Clone the osquery repository
        uses: actions/checkout@v4
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}
          fetch-depth: 0

      - name: Select the build job count
        shell: bash
        id: build_job_count
        run: |
          echo "VALUE=$(($(nproc) + 1))" >> $GITHUB_OUTPUT

      - name: Select the build options for the tests
        shell: bash
        id: tests_build_settings
        run: |
          if [[ "${{ matrix.build_type }}" == "RelWithDebInfo" ]] ; then
            echo "VALUE=OFF" >> $GITHUB_OUTPUT
          else
            echo "VALUE=ON" >> $GITHUB_OUTPUT
          fi

      - name: Get runner hardware info
        shell: bash
        id: runner_stats
        run: |
          df -h
          echo "Cores: $(nproc)"
          free -m

      # We don't have enough space on the worker to actually generate all
      # the debug symbols (osquery + dependencies), so we have a flag to
      # disable them when running a Debug build
      - name: Select the debug symbols options
        shell: bash
        id: debug_symbols_settings
        run: |
          if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
            echo "VALUE=ON" >> $GITHUB_OUTPUT
          else
            echo "VALUE=OFF" >> $GITHUB_OUTPUT
          fi

      - name: Clone the osquery-packaging repository
        run: |
          git clone ${{ env.PACKAGING_REPO }} \
            ${{ steps.build_paths.outputs.PACKAGING }}
          cd ${{ steps.build_paths.outputs.PACKAGING }}
          git checkout ${{ env.PACKAGING_COMMIT }}

      - name: Update the cache (ccache)
        uses: actions/cache@v4
        with:
          path: ${{ steps.build_paths.outputs.CCACHE }}

          key: |
            ccache_${{ matrix.build_type }}_${{ github.sha }}

          restore-keys: |
            ccache_${{ matrix.build_type }}

      - name: Update the cache (git submodules)
        uses: actions/cache@v4
        with:
          path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules

          key: |
            gitmodules_${{env.SUBMODULE_CACHE_VERSION}}_${{ github.sha }}

          restore-keys: |
            gitmodules_${{env.SUBMODULE_CACHE_VERSION}}

      - name: Update the git submodules
        working-directory: ${{ steps.build_paths.outputs.SOURCE }}
        run: |
          git submodule sync --recursive

      - name: Configure the project
        working-directory: ${{ steps.build_paths.outputs.BINARY }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake -G "Unix Makefiles" \
            -DOSQUERY_VERSION=${{ env.OSQUERY_VERSION }} \
            -DOSQUERY_NO_DEBUG_SYMBOLS=${{ steps.debug_symbols_settings.outputs.VALUE }} \
            -DOSQUERY_TOOLCHAIN_SYSROOT:PATH="/usr/local/osquery-toolchain" \
            -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" \
            -DOSQUERY_BUILD_TESTS=${{ steps.tests_build_settings.outputs.VALUE }} \
            -DOSQUERY_BUILD_ROOT_TESTS=${{ steps.tests_build_settings.outputs.VALUE }} \
            "${{ steps.build_paths.outputs.SOURCE }}"

      - name: Build the project
        working-directory: ${{ steps.build_paths.outputs.BINARY }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

        run: |
          cmake --build . -j ${{ steps.build_job_count.outputs.VALUE }}

      - name: Disk space information
        shell: bash
        id: disk_space_info_post_build
        run: |
          df -h
          du -sh ${{ steps.build_paths.outputs.BINARY }}

      # Only run the tests on Debug and Release configurations; skip RelWithDebInfo
      - name: Run the tests as normal user
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        if: matrix.build_type != 'RelWithDebInfo'
        run: |
          ctest --build-nocmake -LE "root-required" -V

      - name: Run the tests as root user
        working-directory: ${{ steps.build_paths.outputs.BINARY }}
        if: matrix.build_type != 'RelWithDebInfo'
        run: |
          sudo -u root ctest --build-nocmake -L "root-required" -V

      - name: Run the install target
        if: matrix.build_type == 'RelWithDebInfo'
        working-directory: ${{ steps.build_paths.outputs.BINARY }}

        env:
          CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}
          DESTDIR: ${{ steps.build_paths.outputs.PACKAGE_DATA }}

        run: |
          cmake \
            --build . \
            --target install \
            -j ${{ steps.build_job_count.outputs.VALUE }}

      - name: Create the packages
        if: matrix.build_type == 'RelWithDebInfo'
        working-directory: ${{ steps.build_paths.outputs.PACKAGE_BUILD }}

        shell: bash

        run: |
          osquery_version=$(cd ${{ steps.build_paths.outputs.SOURCE }} && git describe --tags --always )

          tar pcvzf package_data.tar.gz \
            ${{ steps.build_paths.outputs.PACKAGE_DATA }}

          package_format_list=( "DEB" "RPM" "TGZ" )

          for package_format in "${package_format_list[@]}" ; do
            cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCPACK_GENERATOR=${package_format} \
              -DOSQUERY_PACKAGE_VERSION=${osquery_version} \
              -DOSQUERY_DATA_PATH=${{ steps.build_paths.outputs.PACKAGE_DATA }} \
              -DOSQUERY_SOURCE_DIRECTORY_LIST="${{ steps.build_paths.outputs.SOURCE }};${{ steps.build_paths.outputs.BINARY }}" \
              ${{ steps.build_paths.outputs.PACKAGING }}

            cmake --build . \
              --target package
          done

      - name: Locate the packages
        if: matrix.build_type == 'RelWithDebInfo'
        id: packages
        shell: bash
        run: |
          echo "REL_UNSIGNED_RELEASE_PACKAGE_DATA_PATH=${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/package_data.tar.gz" >> $GITHUB_OUTPUT
          echo "REL_UNSIGNED_RELEASE_DEB_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/*.deb)" >> $GITHUB_OUTPUT
          echo "REL_UNSIGNED_DEBUG_DEB_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/*.ddeb)" >> $GITHUB_OUTPUT
          echo "REL_UNSIGNED_RELEASE_RPM_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/osquery-?.*.rpm)" >> $GITHUB_OUTPUT
          echo "REL_UNSIGNED_DEBUG_RPM_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/osquery-debuginfo-*.rpm)" >> $GITHUB_OUTPUT
          echo "REL_UNSIGNED_RELEASE_TGZ_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/*linux_x86_64.tar.gz)" >> $GITHUB_OUTPUT

      # - name: Store the unsigned release package data artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_release_package_data
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_PACKAGE_DATA_PATH }}

      # - name: Store the unsigned release DEB artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_release_deb
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_DEB_PATH }}

      # - name: Store the unsigned debug DEB artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_debug_deb
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_DEBUG_DEB_PATH }}

      # - name: Store the unsigned release RPM artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_release_rpm
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_RPM_PATH }}

      # - name: Store the unsigned debug RPM artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_debug_rpm
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_DEBUG_RPM_PATH }}

      # - name: Store the unsigned release TGZ artifact
      #   if: matrix.build_type == 'RelWithDebInfo'
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: linux_unsigned_release_tgz
      #     path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_TGZ_PATH }}

      # Before we terminate this job, delete the build folder. The cache
      # actions will require the disk space to create the archives.
      - name: Reclaim disk space
        run: |
          rm -rf ${{ steps.build_paths.outputs.BINARY }}

      - name: Breakpoint on failure
        if: failure()
        uses: namespacelabs/breakpoint-action@v0
        with:
          duration: 15m
          authorized-users: edganiukov,hugosantos,n-g,htr,nichtverstehen,gmichelo

  # # The macOS build will only start once we know that the code
  # # has been properly formatted
  # build_macos:
  #   needs: [check_code_style, check_libraries_manifest]

  #   runs-on: namespace-profile-macos-default

  #   strategy:
  #     matrix:
  #       build_type: [Release, Debug]
  #       architecture: [x86_64, arm64]

  #   steps:
  #     - name: Select the build job count
  #       shell: bash
  #       id: build_job_count
  #       run: |
  #         echo "VALUE=$(($(sysctl -n hw.logicalcpu) + 1))" >> $GITHUB_OUTPUT

  #     - name: Setup the build paths
  #       shell: bash
  #       id: build_paths
  #       run: |
  #         rel_build_path="workspace/build"
  #         rel_src_path="workspace/src"
  #         rel_ccache_path="workspace/ccache"
  #         rel_downloads_path="workspace/downloads"
  #         rel_install_path="workspace/install"
  #         rel_package_data_path="workspace/package_data"
  #         rel_packaging_path="workspace/osquery-packaging"
  #         rel_package_build_path="workspace/package-build"

  #         mkdir -p ${rel_build_path} \
  #                  ${rel_ccache_path} \
  #                  ${rel_downloads_path} \
  #                  ${rel_install_path} \
  #                  ${rel_package_data_path} \
  #                  ${rel_package_build_path}

  #         echo "SOURCE=$(pwd)/${rel_src_path}" >> $GITHUB_OUTPUT
  #         echo "REL_SOURCE=${rel_src_path}" >> $GITHUB_OUTPUT
  #         echo "BINARY=$(pwd)/${rel_build_path}" >> $GITHUB_OUTPUT
  #         echo "CCACHE=$(pwd)/${rel_ccache_path}" >> $GITHUB_OUTPUT
  #         echo "DOWNLOADS=$(pwd)/${rel_downloads_path}" >> $GITHUB_OUTPUT
  #         echo "INSTALL=$(pwd)/${rel_install_path}" >> $GITHUB_OUTPUT
  #         echo "PACKAGING=$(pwd)/${rel_packaging_path}" >> $GITHUB_OUTPUT
  #         echo "PACKAGE_DATA=$(pwd)/${rel_package_data_path}" >> $GITHUB_OUTPUT
  #         echo "REL_PACKAGE_BUILD=${rel_package_build_path}" >> $GITHUB_OUTPUT
  #         echo "PACKAGE_BUILD=$(pwd)/${rel_package_build_path}" >> $GITHUB_OUTPUT

  #     - name: Clone the osquery repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         path: ${{ steps.build_paths.outputs.REL_SOURCE }}

  #     - name: Get runner hardware info
  #       shell: bash
  #       id: runner_stats
  #       run: |
  #         df -h
  #         echo "Cores: $(sysctl -n hw.logicalcpu)"
  #         vm_stat

  #     - name: Update the cache (ccache)
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ steps.build_paths.outputs.CCACHE }}

  #         key: |
  #           ccache_${{ matrix.architecture }}_${{ matrix.build_type }}_${{ github.sha }}

  #         restore-keys: |
  #           ccache_${{ matrix.architecture }}_${{ matrix.build_type }}

  #     - name: Update the cache (git submodules)
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ steps.build_paths.outputs.SOURCE }}/.git/modules

  #         key: |
  #           gitmodules_${{ matrix.architecture }}_${{env.SUBMODULE_CACHE_VERSION}}_${{ github.sha }}

  #         restore-keys: |
  #           gitmodules_${{ matrix.architecture }}_${{env.SUBMODULE_CACHE_VERSION}}

  #     - name: Update the cache (downloads)
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ steps.build_paths.outputs.DOWNLOADS }}

  #         key: |
  #           downloads_${{ matrix.architecture }}_${{ github.sha }}

  #         restore-keys: |
  #           downloads_${{ matrix.architecture }}

  #     - name: Update the git submodules
  #       working-directory: ${{ steps.build_paths.outputs.SOURCE }}
  #       run: |
  #         git submodule sync --recursive

  #     - name: Install build dependencies
  #       run: |
  #         brew install \
  #           ccache \
  #           flex \
  #           bison \
  #           coreutils \
  #           gnu-sed

  #     - name: Setup python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: "3.13.x"
  #         architecture: arm64

  #     - name: Install tests dependencies
  #       id: install_test_deps
  #       run: |
  #         pip3 install setuptools \
  #                       pexpect==3.3 \
  #                       psutil \
  #                       timeout_decorator \
  #                       six \
  #                       thrift==0.11.0 \
  #                       osquery

  #     - name: Install CMake
  #       shell: bash
  #       run: |
  #         ${{ steps.build_paths.outputs.REL_SOURCE }}/tools/ci/scripts/macos/install_cmake.sh \
  #           "${{ steps.build_paths.outputs.DOWNLOADS }}" \
  #           "${{ steps.build_paths.outputs.INSTALL }}" \
  #           "3.21.4"

  #     - name: Select the Xcode version
  #       shell: bash
  #       id: xcode_selector
  #       run: |
  #         xcode_path="/Applications/Xcode_16.app/Contents/Developer"

  #         echo "PATH=${path}" >> $GITHUB_OUTPUT

  #         sudo xcode-select -s "${xcode_path}"

  #         echo "DEPLOYMENT_TARGET=10.15" >> $GITHUB_OUTPUT

  #     # We don't have enough space on the worker to actually generate all
  #     # the debug symbols (osquery + dependencies), so we have a flag to
  #     # disable them when running a Debug build
  #     - name: Select the debug symbols options
  #       shell: bash
  #       id: debug_symbols_settings
  #       run: |
  #         if [[ "${{ matrix.build_type }}" == "Debug" ]] ; then
  #           echo "VALUE=ON" >> $GITHUB_OUTPUT
  #         else
  #           echo "VALUE=OFF" >> $GITHUB_OUTPUT
  #         fi

  #     - name: Configure the project
  #       shell: bash
  #       working-directory: ${{ steps.build_paths.outputs.BINARY }}

  #       env:
  #         CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

  #       run: |
  #         cmake -G "Unix Makefiles" \
  #           -DCMAKE_C_COMPILER=clang \
  #           -DCMAKE_CXX_COMPILER=clang++ \
  #           -DCMAKE_OSX_ARCHITECTURES="${{ matrix.architecture }}" \
  #           -DCMAKE_OSX_DEPLOYMENT_TARGET="${{ steps.xcode_selector.outputs.DEPLOYMENT_TARGET }}" \
  #           -DCMAKE_BUILD_TYPE:STRING="${{ matrix.build_type }}" \
  #           -DOSQUERY_BUILD_TESTS=ON \
  #           -DOSQUERY_VERSION=${{ env.OSQUERY_VERSION }} \
  #           -DOSQUERY_NO_DEBUG_SYMBOLS=${{ steps.debug_symbols_settings.outputs.VALUE }} \
  #           ${{ steps.build_paths.outputs.SOURCE }}

  #     - name: Build the project
  #       working-directory: ${{ steps.build_paths.outputs.BINARY }}

  #       env:
  #         CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}

  #       run: |
  #         cmake --build . -j ${{ steps.build_job_count.outputs.VALUE }}

  #     - name: Disk space information
  #       shell: bash
  #       id: disk_space_info_post_build
  #       run: |
  #         df -h
  #         du -sh ${{ steps.build_paths.outputs.BINARY }}

  #     - name: Run the tests
  #       if: matrix.architecture == 'arm64'
  #       working-directory: ${{ steps.build_paths.outputs.BINARY }}
  #       run: |
  #         ctest --build-nocmake -V

  #     - name: Run the install target
  #       working-directory: ${{ steps.build_paths.outputs.BINARY }}

  #       env:
  #         CCACHE_DIR: ${{ steps.build_paths.outputs.CCACHE }}
  #         DESTDIR: ${{ steps.build_paths.outputs.PACKAGE_DATA }}

  #       run: |
  #         cmake \
  #           --build . \
  #           --target install \
  #           -j ${{ steps.build_job_count.outputs.VALUE }}

  #     - name: Create the package data
  #       working-directory: ${{ steps.build_paths.outputs.PACKAGE_BUILD }}
  #       run: |
  #         tar pcvzf package_data.tar.gz \
  #           -C ${{ steps.build_paths.outputs.PACKAGE_DATA }} \
  #           .

  #     - name: Locate the package data
  #       if: matrix.build_type == 'Release'
  #       id: packages
  #       shell: bash
  #       run: |
  #         echo "REL_UNSIGNED_RELEASE_PACKAGE_DATA_PATH=$(ls ${{ steps.build_paths.outputs.REL_PACKAGE_BUILD }}/package_data.tar.gz)" >> $GITHUB_OUTPUT

  #     # Before we terminate this job, delete the build folder. The cache
  #     # actions will require the disk space to create the archives.
  #     - name: Reclaim disk space
  #       run: |
  #         rm -rf ${{ steps.build_paths.outputs.BINARY }}

  # # This job builds the universal macOS artifacts
  # build_universal_macos_artifacts:
  #   runs-on: namespace-profile-macos-default

  #   steps:
  #     - name: Clone the osquery repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Install CMake
  #       shell: bash
  #       run: |
  #         mkdir -p "workspace/downloads" \
  #                  "workspace/install"

  #         ./tools/ci/scripts/macos/install_cmake.sh \
  #           "workspace/downloads" \
  #           "workspace/install" \
  #           "3.21.4"

  #     - uses: actions/download-artifact@v4.1.7
  #       with:
  #         name: macos_unsigned_release_package_data_x86_64
  #         path: macos_unsigned_release_package_data_x86_64

  #     - uses: actions/download-artifact@v4.1.7
  #       with:
  #         name: macos_unsigned_release_package_data_arm64
  #         path: macos_unsigned_release_package_data_arm64

  #     - name: Create the universal package data
  #       run: |
  #         tools/ci/scripts/macos/build_universal_package_data.sh

  #     - name: Store the universal unsigned release package data artifact
  #       uses: actions/upload-artifact@v4.4.0
  #       with:
  #         name: macos_unsigned_release_package_data_universal
  #         path: package_data.tar.gz

  #     - name: Clone the osquery-packaging repository
  #       run: |
  #         git clone ${{ env.PACKAGING_REPO }} osquery-packaging

  #         cd osquery-packaging
  #         git checkout ${{ env.PACKAGING_COMMIT }}

  #     - name: Create the packages
  #       shell: bash
  #       run: |
  #         osquery_version=$(git describe --tags --always )
  #         package_format_list=( "productbuild" "TGZ" )

  #         for package_format in "${package_format_list[@]}" ; do
  #           cmake -DCMAKE_BUILD_TYPE=Release \
  #             -DCPACK_GENERATOR=${package_format} \
  #             -DOSQUERY_PACKAGE_VERSION=${osquery_version} \
  #             -DOSQUERY_DATA_PATH=$(pwd)/universal \
  #             -S osquery-packaging \
  #             -B package_build

  #           cmake --build package_build \
  #             --target package
  #         done

  #     - name: Locate the packages
  #       id: packages
  #       shell: bash
  #       run: |
  #         echo "REL_UNSIGNED_RELEASE_PKG_PATH=$(ls package_build/*.pkg)" >> $GITHUB_OUTPUT
  #         echo "REL_UNSIGNED_RELEASE_TGZ_PATH=$(ls package_build/*.tar.gz)" >> $GITHUB_OUTPUT

  #     - name: Store the PKG unsigned release packages
  #       uses: actions/upload-artifact@v4.4.0
  #       with:
  #         name: macos_unsigned_pkg_universal
  #         path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_PKG_PATH }}

  #     - name: Store the TGZ unsigned release packages
  #       uses: actions/upload-artifact@v4.4.0
  #       with:
  #         name: macos_unsigned_tgz_universal
  #         path: ${{ steps.packages.outputs.REL_UNSIGNED_RELEASE_TGZ_PATH }}

  # This job is here as a github status check -- it allows us to move the dependency from
  # being on all the jobs to this single one.
  mergeable:
    runs-on:
      - nscloud-ubuntu-20.04-amd64-4x16-with-features
      - namespace-experiments:privileged;host-pid-namespace
    steps:
      - run: true
    needs:
      # - build_macos
      - build_linux
      # - build_windows
      # - build_universal_macos_artifacts
      - check_source_code
